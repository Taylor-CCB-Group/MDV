name: Build and Deploy

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: {}
  push:
    branches:
      - dev
  pull_request:
    types: [closed]
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy]')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags
          fetch-depth: 0

      - name: Get last successful commit hash for scheduled runs
        if: github.event_name == 'schedule'
        id: last_successful_commit
        run: |
          LAST_SUCCESSFUL_COMMIT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=success&branch=dev&per_page=1" | jq -r '.workflow_runs[0].head_sha')
          echo "Last successful commit: $LAST_SUCCESSFUL_COMMIT"
          echo "last_commit_sha=$LAST_SUCCESSFUL_COMMIT" >> $GITHUB_OUTPUT

      - name: Get latest commit hash for scheduled runs
        if: github.event_name == 'schedule'
        id: latest_commit
        run: |
          LATEST_COMMIT=$(git rev-parse HEAD)
          echo "Latest commit on dev: $LATEST_COMMIT"
          echo "latest_commit_sha=$LATEST_COMMIT" >> $GITHUB_OUTPUT

      - name: Check for new commits before building on schedule
        if: github.event_name == 'schedule' && steps.last_successful_commit.outputs.last_commit_sha == steps.latest_commit.outputs.latest_commit_sha
        uses: andymckay/cancel-action@0.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Increment version
        id: increment_version
        run: |
          VERSION=$(cat version.txt)
          echo "Current version: $VERSION"
          NEW_VERSION=$(awk -F. '{print $1"."($2+1)}' version.txt)
          echo "New version: $NEW_VERSION"
          echo $NEW_VERSION > version.txt
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # For scheduled runs, get logs since last successful build. Otherwise, get the last commit.
          if [ "${{ github.event_name }}" == "schedule" ]; then
            RELEASE_NOTES=$(git log --pretty=format:"%h - %s" ${{ steps.last_successful_commit.outputs.last_commit_sha }}..${{ steps.latest_commit.outputs.latest_commit_sha }} | tr '\n' ' ' | sed 's/"/\\"/g')
          else
            RELEASE_NOTES=$(git log -1 --pretty=format:"%h - %s" | sed 's/"/\\"/g')
          fi
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "Release notes: $RELEASE_NOTES"

      - name: Build and push multi-architecture image
        run: |
          echo "Building and pushing image..."
          docker buildx build --platform linux/amd64 \
            --label "org.opencontainers.image.version=${{ steps.increment_version.outputs.new_version }}" \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            --label "org.opencontainers.image.description=${{ steps.release_notes.outputs.release_notes }}" \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/mdv-frontend:${{ steps.increment_version.outputs.new_version }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/mdv-frontend:rbac \
            --push .

      - name: Commit and push new version
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Increment version to ${{ steps.increment_version.outputs.new_version }} [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 