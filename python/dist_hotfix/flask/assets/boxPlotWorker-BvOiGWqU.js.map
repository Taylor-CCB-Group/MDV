{"version":3,"file":"boxPlotWorker-BvOiGWqU.js","sources":["../src/datastore/boxPlotWorker.js"],"sourcesContent":["// biome-ignore lint/suspicious/noGlobalAssign: relatively innocuous in simple web worker\nonmessage = function (e) {\n    if (e.data[4].analysis === \"multi\") {\n        this.postMessage(multiBoxPlot(e));\n        return;\n    }\n    const lFilter = new Uint8Array(e.data[0]);\n    const gFilter = new Uint8Array(e.data[1]);\n    const categories = new Uint8Array(e.data[2]);\n    const arrType = e.data[3][1] === \"int32\" ? Int32Array : Float32Array;\n    const values = new arrType(e.data[3][0]);\n    const config = e.data[4];\n    const len = values.length;\n    const catLen = config.values.length;\n\n    const cats = new Array(catLen).fill(0);\n\n    //get the number in each then create arrays\n    //even though 2 iterations over data this is much faster\n    for (let i = 0; i < len; i++) {\n        if (gFilter[i] !== 0) {\n            if (gFilter[i] !== lFilter[i]) {\n                continue;\n            }\n        }\n        if (Number.isNaN(values[i])) {\n            continue;\n        }\n        cats[categories[i]]++;\n    }\n    const arrs = [];\n    for (let n = 0; n < catLen; n++) {\n        arrs.push(new arrType(cats[n]));\n    }\n\n    const totals = new Array(catLen).fill(0);\n    const xPos = new Float32Array(config.xPos);\n\n    for (let n = 0; n < len; n++) {\n        if (gFilter[n] !== 0) {\n            if (gFilter[n] !== lFilter[n]) {\n                continue;\n            }\n        }\n        if (Number.isNaN(values[n])) {\n            continue;\n        }\n        const cat = categories[n];\n        arrs[cat][totals[cat]++] = values[n];\n    }\n    const boxStats = [];\n\n    if (config.analysis === \"boxplot\") {\n        const ids = {};\n        for (let n = 0; n < catLen; n++) {\n            const arr = arrs[n];\n            const l = arr.length;\n            if (l === 0) {\n                continue;\n            }\n            arr.sort();\n            const midIndex = median(0, l);\n            const med = arr[midIndex];\n            const Q1 = arr[median(0, midIndex)];\n            const Q3 = arr[median(midIndex + 1, l)];\n            const IQR = Q3 - Q1;\n            let min = Q1 - 1.5 * IQR;\n            let max = Q3 + 1.5 * IQR;\n            min = min < arr[0] ? arr[0] : min;\n            max = max > arr[l - 1] ? arr[l - 1] : max;\n\n            ids[n] = boxStats.length;\n            boxStats.push({\n                max: max,\n                min: min,\n                Q1: Q1,\n                Q3: Q3,\n                med: med,\n                id: n,\n            });\n        }\n        for (let n = 0; n < len; n++) {\n            const p = ids[categories[n]];\n            if (p !== undefined) {\n                xPos[n] = p * 50 + 4 + Math.random() * 42;\n            }\n        }\n    } else {\n        const ranges = {};\n        for (let n = 0; n < catLen; n++) {\n            let k = null;\n            if (config.scaletrim) {\n                k = stKernelDensityEstimator(\n                    arrs[n],\n                    config.ticks,\n                    config.scaletrim,\n                    config.bandwidth || 7,\n                );\n            } else {\n                k = kernelDensityEstimator(\n                    arrs[n],\n                    config.ticks,\n                    config.bandwidth || 7,\n                );\n            }\n\n            const max = Math.max(...k);\n\n            if (max !== 0 && !Number.isNaN(max)) {\n                k.id = n;\n                k.max = max;\n                ranges[n] = [boxStats.length, max, k];\n                boxStats.push(k);\n            }\n        }\n        const min = config.ticks[config.ticks.length - 1];\n        const interval = config.ticks[0] - config.ticks[1];\n        for (let n = 0; n < len; n++) {\n            const r = ranges[categories[n]];\n            if (r) {\n                //const index =Math.floor((values[n]-min)/interval)\n                //const fr = r[2][17-index]/r[1];\n                xPos[n] = r[0] * 50 + 4 + Math.random() * 42;\n            }\n        }\n    }\n    postMessage(boxStats);\n};\n\nfunction median(l, r) {\n    return l + Math.round((r - l) / 2);\n}\n\nfunction stKernelDensityEstimator(V, X, Qs, k = 2) {\n    const den = Qs[1] - Qs[0];\n    return X.map((x) => {\n        let sum = 0;\n        let count = 0;\n        for (let i = 0; i < V.length; i++) {\n            let val = V[i];\n            if (!Number.isNaN(val)) {\n                val = (val - Qs[0]) / den;\n                val = val < 0 ? 0 : val > 1 ? 1 : val;\n                let v = x - val;\n                sum += Math.abs((v /= k)) <= 1 ? (0.75 * (1 - v * v)) / k : 0;\n                count++;\n            }\n        }\n        return sum / count;\n    });\n}\n\nfunction kernelDensityEstimator(V, X, k = 2) {\n    return X.map((x) => {\n        let sum = 0;\n        let count = 0;\n        for (let i = 0; i < V.length; i++) {\n            const val = V[i];\n            if (!Number.isNaN(val)) {\n                let v = x - val;\n                sum += Math.abs((v /= k)) <= 1 ? (0.75 * (1 - v * v)) / k : 0;\n                count++;\n            }\n        }\n        return sum / count;\n    });\n}\n\nfunction multiBoxPlot(e) {\n    const data = [];\n    for (const item of e.data[2]) {\n        data.push(\n            item[1] === \"int32\"\n                ? new Int32Array(item[0])\n                : new Float32Array(item[0]),\n        );\n    }\n    const dLen = data.length;\n    const config = e.data[4];\n\n    const scaleVals = config.scaleVals;\n    for (const sv of scaleVals) {\n        sv.push(sv[1] - sv[0]);\n    }\n\n    const lFilter = new Uint8Array(e.data[0]);\n    const gFilter = new Uint8Array(e.data[1]);\n    const tLen = gFilter.length;\n    const results = new Array(dLen);\n    const cats = new Uint8Array(e.data[3]);\n    const cat = config.cat;\n    let total = 0;\n    for (let i = 0; i < tLen; i++) {\n        if (cats[i] === cat && gFilter[i] === 0) {\n            total++;\n        }\n    }\n\n    for (let n = 0; n < dLen; n++) {\n        //should cope with int32 and float32\n        results[n] = new Float64Array(total);\n    }\n    count = 0;\n    for (let i = 0; i < tLen; i++) {\n        if (cats[i] === cat && gFilter[i] === 0) {\n            for (let n = 0; n < dLen; n++) {\n                const v = (data[n][i] - scaleVals[n][0]) / scaleVals[n][2];\n                results[n][count] = v < 0 ? 0 : v > 1 ? 1 : v;\n            }\n            count++;\n        }\n    }\n    const boxStats = [];\n    let tmin = Number.MAX_VALUE;\n    let tmax = Number.MIN_VALUE;\n    for (let n = 0; n < dLen; n++) {\n        const arr = results[n];\n        const l = arr.length;\n        arr.sort();\n        const midIndex = median(0, l);\n        const med = arr[midIndex];\n        const Q1 = arr[median(0, midIndex)];\n        const Q3 = arr[median(midIndex + 1, l)];\n        const IQR = Q3 - Q1;\n        let min = Q1 - 1.5 * IQR;\n        let max = Q3 + 1.5 * IQR;\n        min = min < arr[0] ? arr[0] : min;\n        max = max > arr[l - 1] ? arr[l - 1] : max;\n        tmin = Math.min(tmin, min);\n        tmax = Math.max(tmax, max);\n        boxStats.push({\n            max: max,\n            min: min,\n            Q1: Q1,\n            Q3: Q3,\n            med: med,\n            id: n,\n        });\n    }\n    boxStats.max = tmax;\n    boxStats.min = tmin;\n    return boxStats;\n}\n"],"names":["e","multiBoxPlot","lFilter","gFilter","categories","arrType","values","config","len","catLen","cats","i","arrs","n","totals","xPos","cat","boxStats","ids","arr","midIndex","median","med","Q1","Q3","IQR","min","max","p","ranges","k","stKernelDensityEstimator","kernelDensityEstimator","r","l","V","X","Qs","den","x","sum","count","val","v","data","item","dLen","scaleVals","sv","tLen","results","total","tmin","tmax"],"mappings":"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"}