(function(){"use strict";onmessage=c=>{const l=[];for(const t of c.data[3])l.push(t[1]==="int32"?new Int32Array(t[0]):new Float32Array(t[0]));const d=l.length,u=new Uint8Array(c.data[2]),r=c.data[4],N=u.length;let f=r.values.length;const g=r.scaleVals,s=new Uint8Array(c.data[0]),m=new Uint8Array(c.data[1]);if(r.method==="averages_simple"){const t=A(l,m,s,u,r);postMessage(t);return}const n=new Array(d);for(let t=0;t<d;t++){const a=new Array(f);for(let h=0;h<f;h++)a[h]=r.method==="mean"?[0,0]:[0,0,0];n[t]=a,n[t]._id=t}const e=new Array(f).fill(0);r.method==="mean"?w(n,l,N,d,m,s,u,e,f,g):v(n,l,N,d,m,s,u,e,f,g);const o=[];for(let t=0;t<f;t++)e[t]!==0&&o.push(t);for(let t=0;t<d;t++)n[t]=n[t].filter((a,h)=>e[h]!==0),n[t]._id=t;f=o.length;const i=new Array(f);for(let t=0;t<f;t++){i[t]=new Array(d),i[t]._id=o[t];for(let a=0;a<d;a++)i[t][a]=Number.isNaN(n[a][t])?0:n[a][t]}postMessage({averages:n,transpose:i,catTotals:e})};function v(c,l,d,u,r,N,f,g,s,m){performance.now();for(let n=0;n<d;n++){if(r[n]!==0&&r[n]!==N[n])continue;const e=f[n];g[e]++;for(let o=0;o<u;o++)Number.isNaN(l[o][n])||c[o][e][0]++}for(let n=0;n<u;n++)for(let e=0;e<s;e++)c[n][e][0]&&(c[n][e][1]=new Float32Array(c[n][e][0]));for(let n=0;n<d;n++){if(r[n]!==0&&r[n]!==N[n])continue;const e=f[n];for(let o=0;o<u;o++){if(Number.isNaN(l[o][n]))continue;const i=c[o][e];i[1][i[2]++]=l[o][n]}}for(let n=0;n<u;n++){const e=m[n][1]-m[n][0];for(let o=0;o<s;o++){const t=c[n][o][1];if(!t){c[n][o]=Number.NaN;continue}t.sort();let a=t[Math.floor(t.length/2)];a=(a-m[n][0])/e,c[n][o]=a<0?0:a>1?1:a}}}function w(c,l,d,u,r,N,f,g,s,m){for(let n=0;n<d;n++){if(r[n]!==0&&r[n]!==N[n])continue;const e=f[n];g[e]++;for(let o=0;o<u;o++){if(Number.isNaN(l[o][n]))continue;const i=c[o][e];i[0]+=l[o][n],i[1]++}}for(let n=0;n<u;n++){const e=m[n][1]-m[n][0];if(e===0){for(let o=0;o<s;o++)c[n][o]=0;continue}for(let o=0;o<s;o++){const i=c[n][o];let t=i[0]/i[1];t=(t-m[n][0])/e,c[n][o]=t<0?0:t>1?1:t}}}function A(c,l,d,u,r){const N=c.length,f=u.length,g=r.threshold||0,s=r.values.map((o,i)=>({id:i,count:0,values:r.columns.map((t,a)=>({id:t,total:0,count:0}))}));for(let o=0;o<f;o++){if(l[o]!==0&&l[o]!==d[o])continue;const i=u[o],t=s[i].values;s[i].count++;for(let a=0;a<N;a++){const h=c[a][o];Number.isNaN(h)||!(h>g)||(t[a].total+=h,t[a].count++)}}const m=s[0].values[0];let n=m.count===0?0:m.total/m.count,e=n;for(let o=0;o<N;o++)for(let i=0;i<r.values.length;i++){const t=s[i].values[o],a=t.count===0?0:t.total/t.count;t.frac=s[i].count===0?0:t.count/s[i].count*100,n=a>n?a:n,e=a<e?a:e,t.mean=a,t.cat_id=i}return{data:s,mean_range:[e,n]}}})();
//# sourceMappingURL=catColWorker-BRK20MZB.js.map
