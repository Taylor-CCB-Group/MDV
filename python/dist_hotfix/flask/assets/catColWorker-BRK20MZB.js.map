{"version":3,"file":"catColWorker-BRK20MZB.js","sources":["../src/datastore/catColWorker.js"],"sourcesContent":["// biome-ignore lint/suspicious/noGlobalAssign: relatively innocuous in simple web worker\nonmessage = (e) => {\n    const data = [];\n    for (const item of e.data[3]) {\n        data.push(\n            item[1] === \"int32\"\n                ? new Int32Array(item[0])\n                : new Float32Array(item[0]),\n        );\n    }\n    const dLen = data.length;\n    const cat = new Uint8Array(e.data[2]);\n    const config = e.data[4];\n    const len = cat.length;\n    let valLen = config.values.length;\n    const scaleVals = config.scaleVals;\n\n    const lFilter = new Uint8Array(e.data[0]);\n    const gFilter = new Uint8Array(e.data[1]);\n    if (config.method === \"averages_simple\") {\n        const r = addSimpleMean(data, gFilter, lFilter, cat, config);\n        postMessage(r);\n        return;\n    }\n    const result = new Array(dLen);\n    for (let n = 0; n < dLen; n++) {\n        const arr = new Array(valLen);\n        for (let i = 0; i < valLen; i++) {\n            arr[i] = config.method === \"mean\" ? [0, 0] : [0, 0, 0];\n        }\n        result[n] = arr;\n        //list may get sorted\n        result[n]._id = n;\n    }\n    const catTotals = new Array(valLen).fill(0);\n    if (config.method === \"mean\") {\n        addAverages(\n            result,\n            data,\n            len,\n            dLen,\n            gFilter,\n            lFilter,\n            cat,\n            catTotals,\n            valLen,\n            scaleVals,\n        );\n    } else {\n        addMedians(\n            result,\n            data,\n            len,\n            dLen,\n            gFilter,\n            lFilter,\n            cat,\n            catTotals,\n            valLen,\n            scaleVals,\n        );\n    }\n\n    const indexR = [];\n\n    for (let n = 0; n < valLen; n++) {\n        if (catTotals[n] !== 0) {\n            indexR.push(n);\n        }\n    }\n\n    for (let n = 0; n < dLen; n++) {\n        result[n] = result[n].filter((x, i) => catTotals[i] !== 0);\n        result[n]._id = n;\n    }\n\n    valLen = indexR.length;\n\n    const transpose = new Array(valLen);\n    for (let i = 0; i < valLen; i++) {\n        transpose[i] = new Array(dLen);\n        transpose[i]._id = indexR[i];\n        for (let n = 0; n < dLen; n++) {\n            transpose[i][n] = Number.isNaN(result[n][i]) ? 0 : result[n][i];\n        }\n    }\n    postMessage({\n        averages: result,\n        transpose: transpose,\n        catTotals: catTotals,\n    });\n};\n\nfunction addMedians(\n    result,\n    data,\n    len,\n    dLen,\n    gFilter,\n    lFilter,\n    cat,\n    catTotals,\n    valLen,\n    scaleVals,\n) {\n    const t = performance.now();\n    for (let i = 0; i < len; i++) {\n        //if filtered out in global but not in local\n        if (gFilter[i] !== 0) {\n            if (gFilter[i] !== lFilter[i]) {\n                continue;\n            }\n        }\n        const c = cat[i];\n        catTotals[c]++;\n        for (let n = 0; n < dLen; n++) {\n            if (Number.isNaN(data[n][i])) {\n                continue;\n            }\n            result[n][c][0]++;\n        }\n    }\n\n    for (let n = 0; n < dLen; n++) {\n        for (let i = 0; i < valLen; i++) {\n            if (result[n][i][0]) {\n                result[n][i][1] = new Float32Array(result[n][i][0]);\n            }\n        }\n    }\n    for (let i = 0; i < len; i++) {\n        //if filtered out in global but not in local\n        if (gFilter[i] !== 0) {\n            if (gFilter[i] !== lFilter[i]) {\n                continue;\n            }\n        }\n        const c = cat[i];\n        for (let n = 0; n < dLen; n++) {\n            if (Number.isNaN(data[n][i])) {\n                continue;\n            }\n            const a = result[n][c];\n\n            a[1][a[2]++] = data[n][i];\n        }\n    }\n\n    for (let n = 0; n < dLen; n++) {\n        const den = scaleVals[n][1] - scaleVals[n][0];\n        for (let i = 0; i < valLen; i++) {\n            const a = result[n][i];\n            const li = a[1];\n            if (!li) {\n                result[n][i] = Number.NaN;\n                continue;\n            }\n            li.sort();\n            let r = li[Math.floor(li.length / 2)];\n            r = (r - scaleVals[n][0]) / den;\n            result[n][i] = r < 0 ? 0 : r > 1 ? 1 : r;\n        }\n    }\n}\n\nfunction addMedianst(\n    result,\n    data,\n    len,\n    dLen,\n    gFilter,\n    lFilter,\n    cat,\n    catTotals,\n    valLen,\n    scaleVals,\n) {\n    const t = performance.now();\n    for (let i = 0; i < len; i++) {\n        //if filtered out in global but not in local\n        if (gFilter[i] !== 0) {\n            if (gFilter[i] !== lFilter[i]) {\n                continue;\n            }\n        }\n        const c = cat[i];\n        catTotals[c]++;\n        for (let n = 0; n < dLen; n++) {\n            if (Number.isNaN(data[n][i])) {\n                continue;\n            }\n            result[n][c].push(data[n][i]);\n        }\n    }\n\n    for (let n = 0; n < dLen; n++) {\n        const den = scaleVals[n][1] - scaleVals[n][0];\n        for (let i = 0; i < valLen; i++) {\n            const li = result[n][i];\n            if (li.length === 0) {\n                result[n][i] = Number.NaN;\n                continue;\n            }\n            li.sort();\n            let r = li[Math.floor(li.length / 2)];\n            r = (r - scaleVals[n][0]) / den;\n            result[n][i] = r < 0 ? 0 : r > 1 ? 1 : r;\n        }\n    }\n}\n\nfunction addAverages(\n    result,\n    data,\n    len,\n    dLen,\n    gFilter,\n    lFilter,\n    cat,\n    catTotals,\n    valLen,\n    scaleVals,\n) {\n    for (let i = 0; i < len; i++) {\n        //if filtered out in global but not in local\n        if (gFilter[i] !== 0) {\n            if (gFilter[i] !== lFilter[i]) {\n                continue;\n            }\n        }\n        const c = cat[i];\n        catTotals[c]++;\n        for (let n = 0; n < dLen; n++) {\n            if (Number.isNaN(data[n][i])) {\n                continue;\n            }\n            const a = result[n][c];\n            a[0] += data[n][i];\n            a[1]++;\n        }\n    }\n    for (let n = 0; n < dLen; n++) {\n        const den = scaleVals[n][1] - scaleVals[n][0];\n        if (den === 0) {\n            for (let i = 0; i < valLen; i++) {\n                result[n][i] = 0;\n            }\n            continue;\n        }\n\n        for (let i = 0; i < valLen; i++) {\n            const val = result[n][i];\n            let r = val[0] / val[1];\n            r = (r - scaleVals[n][0]) / den;\n            result[n][i] = r < 0 ? 0 : r > 1 ? 1 : r;\n        }\n    }\n}\n\nfunction addSimpleMean(data, gFilter, lFilter, catData, conf) {\n    const dlen = data.length;\n    const len = catData.length;\n    const thr = conf.threshold || 0;\n    const r = conf.values.map((x, i) => ({\n        id: i,\n        count: 0,\n        values: conf.columns.map((x, i) => ({ id: x, total: 0, count: 0 })),\n    }));\n    for (let i = 0; i < len; i++) {\n        //if filtered out in global but not in local\n        if (gFilter[i] !== 0) {\n            if (gFilter[i] !== lFilter[i]) {\n                continue;\n            }\n        }\n        const c = catData[i];\n        const a = r[c].values;\n        r[c].count++;\n        for (let n = 0; n < dlen; n++) {\n            const v = data[n][i];\n            if (Number.isNaN(v) || !(v > thr)) {\n                continue;\n            }\n            a[n].total += v;\n            a[n].count++;\n        }\n    }\n    const it = r[0].values[0];\n    let amax = it.count === 0 ? 0 : it.total / it.count;\n    let amin = amax;\n    for (let i = 0; i < dlen; i++) {\n        for (let n = 0; n < conf.values.length; n++) {\n            const item = r[n].values[i];\n            const av = item.count === 0 ? 0 : item.total / item.count;\n            item.frac = r[n].count === 0 ? 0 : (item.count / r[n].count) * 100;\n            amax = av > amax ? av : amax;\n            amin = av < amin ? av : amin;\n            item.mean = av;\n            item.cat_id = n;\n        }\n    }\n    return { data: r, mean_range: [amin, amax] };\n}\n"],"names":["e","data","item","dLen","cat","config","len","valLen","scaleVals","lFilter","gFilter","r","addSimpleMean","result","n","arr","i","catTotals","addAverages","addMedians","indexR","x","transpose","c","a","den","li","val","catData","conf","dlen","thr","v","it","amax","amin","av"],"mappings":"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"}