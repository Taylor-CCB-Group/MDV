{"version":3,"file":"deepToolsWorker-Id75ayJb.js","sources":["../src/datastore/deepToolsWorker.js"],"sourcesContent":["// biome-ignore lint/suspicious/noGlobalAssign: relatively innocuous in simple web worker\nonmessage = (e) => {\n    const {\n        orderBuffer,\n        filterBuffer,\n        dimensions,\n        data,\n        displayData,\n        colorScale,\n        colorOnly,\n    } = e.data;\n    //get access to the shared buffers\n    const len = dimensions.length;\n\n    const rowPositions = new Uint16Array(data, 0, len);\n    const colPositions = new Uint16Array(data, len * 2, len);\n    const values = new Uint8Array(data, len * 4, len);\n\n    const x = new Float32Array(displayData, 0, len);\n    const y = new Float32Array(displayData, len * 4, len);\n    const colors = new Uint8Array(displayData, len * 8, len * 3);\n    const order = new Uint32Array(orderBuffer);\n    const filter = new Uint8Array(filterBuffer);\n\n    const c = dimensions.columns;\n    const currentRows = {};\n    const reverse_map = {};\n\n    let i = 0;\n\n    for (const n of order) {\n        if (filter[n] === 0) {\n            currentRows[n] = i;\n            reverse_map[i] = n;\n            i++;\n        }\n    }\n    const cpg = c / dimensions.groups;\n\n    i = 0;\n\n    const interval_size = (colorScale.max - colorScale.min) / colorScale.bins;\n\n    for (let n = 0; n < len; n++) {\n        const row = currentRows[rowPositions[n]];\n        if (row === undefined) {\n            continue;\n        }\n        //update the colors\n        let v = Math.min(colorScale.max, values[n]);\n        v = Math.max(colorScale.min, v);\n        const color =\n            colorScale.colors[Math.floor((v - colorScale.min) / interval_size)];\n        const p = 3 * i;\n        colors[p] = color[0];\n        colors[p + 1] = color[1];\n        colors[p + 2] = color[2];\n        if (colorOnly) {\n            i++;\n            continue;\n        }\n        const col = colPositions[n];\n        x[i] = col * 20 + Math.floor(col / cpg) * 200 + 10;\n        y[i] = row * 20 + 10;\n        i++;\n    }\n    postMessage({ reverse_map, total: i, currentRows });\n};\n"],"names":["e","orderBuffer","filterBuffer","dimensions","data","displayData","colorScale","colorOnly","len","rowPositions","colPositions","values","x","y","colors","order","filter","c","currentRows","reverse_map","i","n","cpg","interval_size","row","v","color","p","col"],"mappings":"yBACA,UAAaA,GAAM,CACf,KAAM,CACF,YAAAC,EACA,aAAAC,EACA,WAAAC,EACA,KAAAC,EACA,YAAAC,EACA,WAAAC,EACA,UAAAC,CACR,EAAQP,EAAE,KAEAQ,EAAML,EAAW,OAEjBM,EAAe,IAAI,YAAYL,EAAM,EAAGI,CAAG,EAC3CE,EAAe,IAAI,YAAYN,EAAMI,EAAM,EAAGA,CAAG,EACjDG,EAAS,IAAI,WAAWP,EAAMI,EAAM,EAAGA,CAAG,EAE1CI,EAAI,IAAI,aAAaP,EAAa,EAAGG,CAAG,EACxCK,EAAI,IAAI,aAAaR,EAAaG,EAAM,EAAGA,CAAG,EAC9CM,EAAS,IAAI,WAAWT,EAAaG,EAAM,EAAGA,EAAM,CAAC,EACrDO,EAAQ,IAAI,YAAYd,CAAW,EACnCe,EAAS,IAAI,WAAWd,CAAY,EAEpCe,EAAId,EAAW,QACfe,EAAc,CAAA,EACdC,EAAc,CAAA,EAEpB,IAAIC,EAAI,EAER,UAAWC,KAAKN,EACRC,EAAOK,CAAC,IAAM,IACdH,EAAYG,CAAC,EAAID,EACjBD,EAAYC,CAAC,EAAIC,EACjBD,KAGR,MAAME,EAAML,EAAId,EAAW,OAE3BiB,EAAI,EAEJ,MAAMG,GAAiBjB,EAAW,IAAMA,EAAW,KAAOA,EAAW,KAErE,QAASe,EAAI,EAAGA,EAAIb,EAAKa,IAAK,CAC1B,MAAMG,EAAMN,EAAYT,EAAaY,CAAC,CAAC,EACvC,GAAIG,IAAQ,OACR,SAGJ,IAAIC,EAAI,KAAK,IAAInB,EAAW,IAAKK,EAAOU,CAAC,CAAC,EAC1CI,EAAI,KAAK,IAAInB,EAAW,IAAKmB,CAAC,EAC9B,MAAMC,EACFpB,EAAW,OAAO,KAAK,OAAOmB,EAAInB,EAAW,KAAOiB,CAAa,CAAC,EAChEI,EAAI,EAAIP,EAId,GAHAN,EAAOa,CAAC,EAAID,EAAM,CAAC,EACnBZ,EAAOa,EAAI,CAAC,EAAID,EAAM,CAAC,EACvBZ,EAAOa,EAAI,CAAC,EAAID,EAAM,CAAC,EACnBnB,EAAW,CACXa,IACA,QACH,CACD,MAAMQ,EAAMlB,EAAaW,CAAC,EAC1BT,EAAEQ,CAAC,EAAIQ,EAAM,GAAK,KAAK,MAAMA,EAAMN,CAAG,EAAI,IAAM,GAChDT,EAAEO,CAAC,EAAII,EAAM,GAAK,GAClBJ,GACH,CACD,YAAY,CAAE,YAAAD,EAAa,MAAOC,EAAG,YAAAF,CAAa,CAAA,CACtD"}