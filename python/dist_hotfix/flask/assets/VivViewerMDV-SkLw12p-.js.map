{"version":3,"file":"VivViewerMDV-SkLw12p-.js","sources":["../../../../src/utilities/VivUtils.js","../../../../src/webgl/VivViewerMDV.js"],"sourcesContent":["import { getChannelStats } from \"@vivjs-experimental/viv\";\nimport { Matrix4 } from \"@math.gl/core\";\n\n/** copied (not quite verbatim) from avivator utils */\nexport async function getSingleSelectioStats3D(\n    loader,\n    selection = { c: 0, t: 0 },\n) {\n    const lowResSource = loader[loader.length - 1];\n    const { shape, labels } = lowResSource;\n    const sizeZ = shape[labels.indexOf(\"z\")] >> (loader.length - 1);\n    const raster0 = await lowResSource.getRaster({\n        selection: { ...selection, z: 0 },\n    });\n    const rasterMid = await lowResSource.getRaster({\n        selection: { ...selection, z: Math.floor(sizeZ / 2) },\n    });\n    const rasterTop = await lowResSource.getRaster({\n        selection: { ...selection, z: Math.max(0, sizeZ - 1) },\n    });\n    const stats0 = getChannelStats(raster0.data);\n    const statsMid = getChannelStats(rasterMid.data);\n    const statsTop = getChannelStats(rasterTop.data);\n    return {\n        domain: [\n            Math.min(stats0.domain[0], statsMid.domain[0], statsTop.domain[0]),\n            Math.max(stats0.domain[1], statsMid.domain[1], statsTop.domain[1]),\n        ],\n        contrastLimits: [\n            Math.min(\n                stats0.contrastLimits[0],\n                statsMid.contrastLimits[0],\n                statsTop.contrastLimits[0],\n            ),\n            Math.max(\n                stats0.contrastLimits[1],\n                statsMid.contrastLimits[1],\n                statsTop.contrastLimits[1],\n            ),\n        ],\n    };\n}\n\nexport async function getMultiSelectionStats(\n    loader,\n    selections = [{ c: 0, t: 0 }],\n) {\n    const stats = await Promise.all(\n        selections.map((selection) =>\n            getSingleSelectioStats3D(loader, selection),\n        ),\n    );\n    const domains = stats.map((stat) => stat.contrastLimits);\n    const contrastLimits = stats.map((stat) => stat.contrastLimits);\n    return { domains, contrastLimits };\n}\n\nexport function getDefaultSelectionStats(n) {\n    const domains = new Array(n).fill([0, 1000]);\n    const contrastLimits = domains;\n    //nb, not clear that adding _id here is necessarily ideal, seems to be working for now\n    //key for keeping track of multiple 'channels' with selections on the same 'c'.\n    const selections = new Array(n).fill().map((_, i) => {\n        return { c: i, t: 0, z: 0, _id: i };\n    });\n    const colors = getDefaultChannelColors(n);\n    const channelsVisible = new Array(n).fill(true);\n    return { domains, contrastLimits, selections, colors, channelsVisible };\n}\n\nexport function getDefaultChannelColors(n) {\n    if (n === 1) return [[255, 255, 255]];\n    return new Array(n).fill([0, 0, 0]).map((_, i) => {\n        //TODO: non-shit algorithm / use a nice palette.\n        const a = i / n;\n        return [Math.floor(a * 255), Math.floor((1 - a) * 255), 0];\n    });\n}\n\n/**\n * Get physical size scaling Matrix4\n * @param {Object} loader PixelSource\n */\nexport function getPhysicalSizeScalingMatrix(loader) {\n    const { x, y, z } = loader?.meta?.physicalSizes ?? {};\n    if (x?.size && y?.size && z?.size) {\n        const min = Math.min(z.size, x.size, y.size);\n        const ratio = [x.size / min, y.size / min, z.size / min];\n        return new Matrix4().scale(ratio);\n    }\n    return new Matrix4().identity();\n}\n\nexport function getBoundingCube(loader) {\n    const source = Array.isArray(loader) ? loader[0] : loader;\n    const { shape, labels } = source;\n    const physicalSizeScalingMatrix = getPhysicalSizeScalingMatrix(source);\n    const xSlice = [\n        0,\n        physicalSizeScalingMatrix[0] * shape[labels.indexOf(\"x\")],\n    ];\n    const ySlice = [\n        0,\n        physicalSizeScalingMatrix[5] * shape[labels.indexOf(\"y\")],\n    ];\n    const zSlice = [\n        0,\n        physicalSizeScalingMatrix[10] * shape[labels.indexOf(\"z\")],\n    ];\n    return [xSlice, ySlice, zSlice];\n}\n","import {\n    loadOmeTiff,\n    DetailView,\n    VolumeView,\n    ColorPaletteExtension,\n    ColorPalette3DExtensions,\n    DETAIL_VIEW_ID,\n    getChannelStats,\n} from \"@vivjs-experimental/viv\";\n\nimport { hexToRGB, RGBToHex } from \"../datastore/DataStore.js\";\nimport { Deck } from \"@deck.gl/core\";\nimport {\n    getMultiSelectionStats,\n    getDefaultSelectionStats,\n    getBoundingCube,\n} from \"../utilities/VivUtils.js\";\nimport { ScatterplotLayer } from \"deck.gl\";\nimport { getRandomString, NPOT } from \"../utilities/Utilities.js\";\n\nconst tiffs = new Map();\nexport function acceptTiffCache(oldTiffs) {\n    console.log(\"accepting tiff cache\");\n    oldTiffs.forEach((tiff, key) => {\n        tiffs.set(key, tiff);\n    });\n}\nfunction getTiff(url) {\n    if (tiffs.has(url)) {\n        return tiffs.get(url);\n    }\n    const tiff = loadOmeTiff(url);\n    tiffs.set(url, tiff);\n    return tiff;\n}\n// if (module.hot) {\n//   module.hot.accept(newModule => {\n//     newModule.acceptTiffCache(tiffs);\n//   });\n// }\n\nclass VivViewerMDV {\n    constructor(canvas, config, initialView) {\n        console.log(\"new VivViewerMDV\", config);\n        this.canvas = canvas;\n        this.height = this.canvas.height;\n        this.width = this.canvas.width;\n        this.config = config;\n        this.hasRequestedDefaultChannelStats = false;\n        this.initClip();\n\n        getTiff(config.url)\n            .then((loader) => {\n                this.tiff = loader;\n                this._setUp(loader, initialView);\n            })\n            .catch((e) => {\n                console.log(e);\n                const ctx = this.canvas.getContext(\"2d\");\n                ctx.font = \"20px Arial\";\n                this.canvas\n                    .getContext(\"2d\")\n                    .fillText(\"Error loading data\", 10, 20);\n            });\n    }\n\n    setSize(x, y, conf) {\n        this.height = y;\n        this.width = x;\n\n        const v = this.getViewState(conf.x_scale, conf.y_scale, conf.offset);\n\n        this.detailView = new DetailView({\n            id: DETAIL_VIEW_ID,\n            height: y < this.native_y ? this.native_y : y,\n            width: x < this.native_x ? this.native_x : x,\n        });\n\n        const deckGLView = this.detailView.getDeckGlView();\n        this.canvas.width = x;\n        this.canvas.height = y;\n        this.canvas.style.width = x;\n        this.canvas.style.height = y;\n        this.deck.setProps({\n            height: y,\n            width: x,\n            viewState: v,\n            views: [deckGLView],\n        });\n    }\n\n    setPanZoom(offset, x_scale, y_scale) {\n        const v = this.getViewState(x_scale, y_scale, offset);\n        this.deck.setProps({\n            viewState: v,\n        });\n    }\n\n    getViewState(x_scale, y_scale, offset) {\n        // when rendering 3d, we want viewState to be undefined so it can use initialViewState & internal camera control\n        if (this.config.use3d) return undefined;\n        const hzoom = Math.log2(y_scale);\n        const wzoom = Math.log2(x_scale);\n        //need to make width and height th same as the canvas if they are smaller\n        //this is because the target is based on the width and height\n        const nx = this.width > this.native_x ? this.width : this.native_x;\n        const ny = this.height > this.native_y ? this.height : this.native_y;\n        let xpos = ((1 / x_scale) * nx) / 2;\n        xpos -= offset[0];\n        let ypos = ((1 / y_scale) * ny) / 2;\n        ypos += this.native_y - offset[1];\n        return {\n            height: nx,\n            width: ny,\n            id: DETAIL_VIEW_ID,\n            target: [xpos, ypos, 0],\n            zoom: [wzoom, hzoom],\n        };\n    }\n\n    setChannel(channel) {\n        const channels = this.mainVivLayer.props;\n        const i = channels.selections.findIndex((x) => x.id === channel.id);\n\n        channels.colors[i] = hexToRGB(channel.color);\n        channels.contrastLimits[i] = channel.contrastLimits;\n        channels.channelsVisible[i] = channel.channelsVisible;\n        if (channel.domains) channels.domains[i] = channel.domains;\n        this.layers = [...this.layers];\n        this.deck.setProps({\n            layers: this.layers,\n        });\n    }\n\n    removeChannel(channel) {\n        const chs = this.mainVivLayer.props;\n        const i = chs.selections.findIndex((sel) => sel.id === channel.id);\n        chs.colors.splice(i, 1);\n        chs.selections.splice(i, 1);\n        chs.contrastLimits.splice(i, 1);\n        chs.channelsVisible.splice(i, 1);\n        chs.domains.splice(i, 1);\n        this.createLayers(chs);\n        this.deck.setProps({\n            layers: [this.layers],\n        });\n    }\n\n    async addChannel(channel) {\n        const chs = this.mainVivLayer.props;\n        chs.channelsVisible.push(true);\n        channel.color = channel.color || \"#ff00ff\";\n        // pjt consider using helpers (now effectively doing this indirectly).\n        /// --> channel.contrastLimit was always undefined anway\n        // channel.contrastLimits = channel.contrastLimit || [20,100];\n        //if new channels are addded there are no default values -need to be calculated?\n        const sel = { z: 0, t: 0, c: channel.index };\n        const data = await this.getDefaultChannelValues([{ index: 0, sel }]);\n\n        channel.contrastLimits = data[0].stats.contrastLimits; //this.defaultContrastLimits[channel.index].slice(0);\n        channel.domains = data[0].stats.domain; //this.defaultDomains[channel.index].slice(0);\n        channel.channelsVisible = true;\n        chs.colors.push(hexToRGB(channel.color));\n        chs.contrastLimits.push(channel.contrastLimits);\n        chs.domains.push(channel.domains);\n        channel.id = getRandomString();\n        chs.selections.push({ ...sel, id: channel.id });\n\n        this.createLayers(chs);\n        this.deck.setProps({\n            layers: [this.layers],\n        });\n\n        channel.name = this.channels[channel.index].Name;\n        //channel._id = chs.selections[chs.selections.length-1]._id;\n        return channel;\n    }\n\n    /** equivalent to VivScatterPlot... */\n    getAllChannels() {\n        return this.channels;\n    }\n    getSelectedChannels() {\n        const { props } = this.mainVivLayer;\n        const names = props.selections.map((x) => this.channels[x.c].Name);\n        const colors = props.colors.map(RGBToHex);\n        return names.map((name, i) => {\n            return {\n                name,\n                index: props.selections[i].c,\n                id: props.selections[i].id,\n                color: colors[i],\n                contrastLimits: props.contrastLimits[i].slice(0),\n                channelsVisible: props.channelsVisible[i],\n                domains: props.domains[i],\n            };\n        });\n    }\n\n    recenterCamera() {\n        if (!this.config.use3d) return;\n        console.log(\"recenter\");\n        const { SizeX, SizeY, SizeZ } = this.tiff.metadata.Pixels;\n        const target = [SizeX / 2, SizeY / 2, SizeZ / 2];\n        const initialViewState = {\n            target,\n            zoom: 1,\n            rotationX: 0,\n            rotationOrbit: 0 + Math.random() * 0.01,\n        };\n        this.volViewState = initialViewState;\n        this.deck.setProps({\n            initialViewState,\n        });\n    }\n\n    _createLayers3D() {\n        const tiff = this.tiff;\n        //most of this can move into createLayers()\n        const {\n            SizeX,\n            SizeY,\n            SizeZ,\n            Channels: channels,\n        } = tiff.metadata.Pixels;\n        const target = [SizeX / 2, SizeY / 2, SizeZ / 2];\n        const id = `3d_${DETAIL_VIEW_ID}`;\n        const loader = tiff.data;\n        const n = channels.length;\n        // this is wrong in cases where non-default set of channels is used.\n        // const selections = channels.map((_, i) => {return {c: i, t: 0, z: 0}});\n        const dtype = tiff.data[0].dtype;\n        const { domains, contrastLimits, selections, colors, channelsVisible } =\n            this.newVivProps ??\n            (this.mainVivLayer\n                ? this.mainVivLayer.props\n                : getDefaultSelectionStats(n));\n        this.newVivProps = null;\n        if (!this.hasRequestedDefaultChannelStats) {\n            this.hasRequestedDefaultChannelStats = true;\n            this.defaultDomains = domains;\n            this.defaultContrastLimits = contrastLimits.slice(0);\n            getMultiSelectionStats(loader, selections).then((v) => {\n                this.defaultDomains = v.domains;\n                this.defaultContrastLimits = v.contrastLimits.slice(0);\n                this.newVivProps = { ...this.mainVivLayer.props, ...v };\n                this._updateProps();\n            });\n        }\n        const xSlice = this.getXSlice();\n        const ySlice = this.getYSlice();\n        const zSlice = this.getZSlice();\n        const resolution = loader.length - 1; // this should change...\n        const props = {\n            id,\n            loader,\n            dtype,\n            resolution,\n            channelsVisible,\n            contrastLimits,\n            domains,\n            selections,\n            colors,\n            xSlice,\n            ySlice,\n            zSlice,\n        };\n        const volumeView = this.detailView;\n        // could we setProps here instead when the layer already exists? no, don't think so - readonly.\n        const layers = volumeView.getLayers({\n            props,\n            viewStates: [this.volViewState],\n        });\n        this.layers = layers;\n        this.mainVivLayer = layers[0];\n        if (this.config.scatterData) {\n            // alert('scatter!');\n            layers.push(\n                new ScatterplotLayer({\n                    data: this.config.scatterData, //.slice(0), //do not want to clone / slice here... but mutating data doesn't work otherwise\n                    radiusScale: 1,\n                    billboard: true,\n                    getFillColor: this.config.getScatterFillColor,\n                    // getFillColor: (d) => d.color || [100, 100, 100]\n                }),\n            );\n        }\n    }\n\n    initClip() {\n        this.clipX = [0, 1];\n        this.clipY = [0, 1];\n        this.clipZ = [0, 1];\n    }\n    // so much boilerplate...\n    setClipX(min, max) {\n        this.clipX = [min, max];\n        this._updateProps();\n    }\n    setClipY(min, max) {\n        this.clipY = [min, max];\n        this._updateProps();\n    }\n    setClipZ(min, max) {\n        this.clipZ = [min, max];\n        this._updateProps();\n    }\n    getXSlice() {\n        const { SizeX } = this.tiff.metadata.Pixels;\n        const [min, max] = this.clipX;\n        // const v = NPOT(SizeX);\n        const v = getBoundingCube(this.loader)[0][1];\n        return [min * v, max * v];\n    }\n    getYSlice() {\n        const { SizeY } = this.tiff.metadata.Pixels;\n        const [min, max] = this.clipY;\n        // const v = NPOT(SizeY);\n        const v = getBoundingCube(this.loader)[1][1];\n        return [min * v, max * v];\n    }\n    getZSlice() {\n        const { SizeZ } = this.tiff.metadata.Pixels;\n        const [min, max] = this.clipZ;\n        // const v = NPOT(SizeZ);\n        const v = getBoundingCube(this.loader)[2][1];\n        return [min * v, max * v];\n    }\n    _updateProps() {\n        this.createLayers();\n        this.deck.setProps({ layers: this.layers });\n    }\n\n    //parses the config into internal data structure\n    //adding any missing values as necessary\n    _parseChannels(conf) {\n        const nconf = {\n            selections: [],\n            colors: [],\n            channelsVisible: [],\n            contrastLimits: [],\n            domains: [],\n        };\n        const def_colors = [\n            [0, 0, 255],\n            [0, 255, 0],\n            [255, 0, 0],\n            [255, 255, 0],\n            [0, 255, 255],\n            [255, 0, 255],\n        ];\n        let c_index = 0;\n        for (const item of conf) {\n            const chan = this.channels.findIndex((x) => x.Name === item.name);\n            if (chan === -1) {\n                console.warn(\n                    `channel '${item.name}' not found, uniforms housekeeping will be a bit messed up`,\n                );\n                continue;\n            }\n            nconf.selections.push({ z: 0, t: 0, c: chan });\n            let c = item.color;\n            c = c\n                ? typeof item.color === \"string\"\n                    ? hexToRGB(c)\n                    : c\n                : def_colors[c_index];\n            c_index++;\n            if (c_index >= def_colors.length) {\n                c_index = 0;\n            }\n            nconf.colors.push(c);\n            nconf.channelsVisible.push(\n                item.visible === undefined ? true : item.visible,\n            );\n            nconf.contrastLimits.push(item.contrastLimits || null);\n            nconf.domains.push(item.domains || null);\n        }\n        return nconf;\n    }\n\n    //get the channels in a nice format\n    getSelectedChannelsNice() {\n        const k = this.layers[0].props;\n        return k.selections.map((x, i) => {\n            return {\n                name: this.channels[x.c].Name,\n                color: k.colors[i],\n                visible: k.channelsVisible[i],\n                contrastLimits: k.contrastLimits[i],\n                domains: k.domains[i],\n            };\n        });\n    }\n\n    _setUp(loader, iv) {\n        this.native_x = loader.metadata.Pixels.SizeX;\n        this.native_y = loader.metadata.Pixels.SizeY;\n        const { use3d } = this.config;\n\n        this.extensions = [new ColorPaletteExtension()];\n        this.channels = loader.metadata.Pixels.Channels;\n        this.loader = loader.data;\n        this.transparentColor = [255, 255, 255, 0];\n        const baseViewState = this.getViewState(\n            iv.x_scale,\n            iv.y_scale,\n            iv.offset,\n        );\n\n        if (use3d) {\n            // this._setUpVolumeView(loader);\n            const { SizeX, SizeY, SizeZ } = loader.metadata.Pixels;\n            const target = [SizeX / 2, SizeY / 2, SizeZ / 2];\n            this.volViewState = {\n                zoom: 1,\n                target,\n            };\n            this.detailView = new VolumeView({\n                id: DETAIL_VIEW_ID,\n                useFixedAxis: false,\n                target,\n                extensions: [\n                    new ColorPalette3DExtensions.AdditiveBlendExtension(),\n                ],\n            });\n        } else {\n            this.detailView = new DetailView({\n                id: DETAIL_VIEW_ID,\n                height:\n                    this.native_y > this.height ? this.native_y : this.height,\n                width: this.native_x > this.width ? this.native_x : this.width,\n            });\n        }\n        const initialViewState = this.volViewState;\n        let { image_properties } = this.config;\n\n        const deckGLView = this.detailView.getDeckGlView();\n        //new more readable config\n        if (this.config.channels) {\n            image_properties = this._parseChannels(this.config.channels);\n        }\n        if (image_properties?.selections)\n            for (const s of image_properties.selections) {\n                s.id = getRandomString();\n            }\n        //check if there are any channels without contrast limits and get default values\n        const contrastLimitsToGet = [];\n        for (let n = 0; n < image_properties.contrastLimits.length; n++) {\n            if (\n                image_properties.contrastLimits[n] &&\n                image_properties.domains[n]\n            ) {\n                continue;\n            }\n            contrastLimitsToGet.push({\n                index: n,\n                sel: image_properties.selections[n],\n            });\n        }\n        //get the default values and continue the set up\n        this.getDefaultChannelValues(contrastLimitsToGet).then((data) => {\n            for (const d of data) {\n                image_properties.contrastLimits[d.index] =\n                    d.stats.contrastLimits;\n                image_properties.domains[d.index] = d.stats.domain;\n            }\n            this.createLayers(image_properties);\n            this.deck = new Deck({\n                canvas: this.canvas,\n                layers: [this.layers],\n                views: [deckGLView],\n                viewState: baseViewState,\n                width: this.width,\n                height: this.height,\n                useDevicePixels: true,\n                initialViewState,\n                controller: use3d,\n            });\n        });\n    }\n\n    //would be better to sample data that's loaded - but can't find\n    //a way of doing this. Also domainLimits seem way too large and for\n    //very low signals contrast limits are way too high\n    async getDefaultChannelValues(selections) {\n        return await Promise.all(\n            selections.map(async (s) => {\n                const data = await this.loader[\n                    this.loader.length - 1\n                ].getRaster({ selection: s.sel });\n                return { index: s.index, stats: getChannelStats(data.data) };\n            }),\n        );\n    }\n\n    createLayers(info) {\n        if (this.config.use3d) {\n            this._createLayers3D();\n            return;\n        }\n        const viewStates = { id: DETAIL_VIEW_ID };\n\n        //domains may not be the same as contrast limits -  again need way of calculating\n        //temp default values\n        const layerConfig = {\n            loader: this.loader,\n            contrastLimits: info.contrastLimits.slice(0),\n            domains: info.domains.slice(0),\n            colors: info.colors.slice(0),\n            channelsVisible: info.channelsVisible.slice(0),\n            selections: info.selections.slice(0),\n            extensions: this.extensions,\n            transparentColor: this.transparentColor,\n        };\n        if (!this.defaultDomains)\n            this.defaultDomains = layerConfig.contrastLimits; //PJT somewhat tested\n        if (!this.defaultContrastLimits)\n            this.defaultContrastLimits = this.defaultDomains.slice(0);\n        this.layers = this.detailView.getLayers({\n            viewStates,\n            props: layerConfig,\n        });\n        //scale bar layer not formatted correctly\n        this.layers = [this.layers[0]];\n        this.mainVivLayer = this.layers[0];\n    }\n}\n\nexport default VivViewerMDV;\n"],"names":["getSingleSelectioStats3D","loader","selection","lowResSource","shape","labels","sizeZ","raster0","rasterMid","rasterTop","stats0","getChannelStats","statsMid","statsTop","getMultiSelectionStats","selections","stats","domains","stat","contrastLimits","getDefaultSelectionStats","_","i","colors","getDefaultChannelColors","channelsVisible","a","getPhysicalSizeScalingMatrix","x","y","z","_a","min","ratio","Matrix4","getBoundingCube","source","physicalSizeScalingMatrix","xSlice","ySlice","zSlice","tiffs","getTiff","url","tiff","loadOmeTiff","VivViewerMDV","canvas","config","initialView","e","ctx","conf","v","DetailView","DETAIL_VIEW_ID","deckGLView","offset","x_scale","y_scale","hzoom","wzoom","nx","ny","xpos","ypos","channel","channels","hexToRGB","chs","sel","data","getRandomString","props","names","RGBToHex","name","SizeX","SizeY","SizeZ","initialViewState","id","n","dtype","resolution","layers","ScatterplotLayer","max","nconf","def_colors","c_index","item","chan","c","k","iv","use3d","ColorPaletteExtension","baseViewState","target","VolumeView","ColorPalette3DExtensions","image_properties","s","contrastLimitsToGet","d","Deck","info","viewStates","layerConfig"],"mappings":"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"}