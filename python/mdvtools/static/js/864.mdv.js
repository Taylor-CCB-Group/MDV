onmessage=function(t){const e=[];for(let n of t.data[3])e.push("int32"===n[1]?new Int32Array(n[0]):new Float32Array(n[0]));const n=e.length,o=new Uint8Array(t.data[2]),a=t.data[4],l=o.length;let r=a.values.length;const s=a.scaleVals,c=new Uint8Array(t.data[0]),f=new Uint8Array(t.data[1]);if("averages_simple"===a.method){const t=function(t,e,n,o,a){const l=t.length,r=o.length,s=a.threshold||0,c=a.values.map(((t,e)=>({id:e,count:0,values:a.columns.map(((t,e)=>({id:t,total:0,count:0})))})));for(let a=0;a<r;a++){if(0!==e[a]&&e[a]!==n[a])continue;const r=o[a],f=c[r].values;c[r].count++;for(let e=0;e<l;e++){const n=t[e][a];!isNaN(n)&&n>s&&(f[e].total+=n,f[e].count++)}}let f=c[0].values[0],i=0==f.count?0:f.total/f.count,u=i;for(let t=0;t<l;t++)for(let e=0;e<a.values.length;e++){const n=c[e].values[t],o=(n.count,0==n.count?0:n.total/n.count);n.frac=0==c[e].count?0:n.count/c[e].count*100,i=o>i?o:i,u=o<u?o:u,n.mean=o}return{data:c,mean_range:[u,i]}}(e,f,c,o,a);return void postMessage(t)}let i=new Array(n);for(let t=0;t<n;t++){const e=new Array(r);for(let t=0;t<r;t++)e[t]="mean"===a.method?[0,0]:[0,0,0];i[t]=e,i[t]._id=t}const u=new Array(r).fill(0);"mean"===a.method?function(t,e,n,o,a,l,r,s,c,f){for(let c=0;c<n;c++){if(0!==a[c]&&a[c]!==l[c])continue;let n=r[c];s[n]++;for(let a=0;a<o;a++){if(isNaN(e[a][c]))continue;const o=t[a][n];o[0]+=e[a][c],o[1]++}}for(let e=0;e<o;e++){const n=f[e][1]-f[e][0];if(0!==n)for(let o=0;o<c;o++){let a=t[e][o],l=a[0]/a[1];l=(l-f[e][0])/n,t[e][o]=l<0?0:l>1?1:l}else for(let n=0;n<c;n++)t[e][n]=0}}(i,e,l,n,f,c,o,u,r,s):function(t,e,n,o,a,l,r,s,c,f){performance.now();for(let c=0;c<n;c++){if(0!==a[c]&&a[c]!==l[c])continue;let n=r[c];s[n]++;for(let a=0;a<o;a++)isNaN(e[a][c])||t[a][n][0]++}for(let e=0;e<o;e++)for(let n=0;n<c;n++)t[e][n][0]&&(t[e][n][1]=new Float32Array(t[e][n][0]));for(let s=0;s<n;s++){if(0!==a[s]&&a[s]!==l[s])continue;let n=r[s];for(let a=0;a<o;a++){if(isNaN(e[a][s]))continue;const o=t[a][n];o[1][o[2]++]=e[a][s]}}for(let e=0;e<o;e++){const n=f[e][1]-f[e][0];for(let o=0;o<c;o++){const a=t[e][o][1];if(!a){t[e][o]=NaN;continue}a.sort();let l=a[Math.floor(a.length/2)];l=(l-f[e][0])/n,t[e][o]=l<0?0:l>1?1:l}}}(i,e,l,n,f,c,o,u,r,s);const d=[];for(let t=0;t<r;t++)0!==u[t]&&d.push(t);for(let t=0;t<n;t++)i[t]=i[t].filter(((t,e)=>0!==u[e])),i[t]._id=t;r=d.length;const h=new Array(r);for(let t=0;t<r;t++){h[t]=new Array(n),h[t]._id=d[t];for(let e=0;e<n;e++)h[t][e]=isNaN(i[e][t])?0:i[e][t]}postMessage({averages:i,transpose:h,catTotals:u})};