import{g as u,M as L,D as f,h as S,i as V,R as b,S as M,C as k,V as R,k as X,l as Z,n as A,p as Y}from"../js/mdv.js";async function T(o,t={c:0,t:0}){const s=o[o.length-1],{shape:i,labels:e}=s,a=i[e.indexOf("z")]>>o.length-1,n=await s.getRaster({selection:{...t,z:0}}),c=await s.getRaster({selection:{...t,z:Math.floor(a/2)}}),d=await s.getRaster({selection:{...t,z:Math.max(0,a-1)}}),l=u(n.data),r=u(c.data),h=u(d.data);return{domain:[Math.min(l.domain[0],r.domain[0],h.domain[0]),Math.max(l.domain[1],r.domain[1],h.domain[1])],contrastLimits:[Math.min(l.contrastLimits[0],r.contrastLimits[0],h.contrastLimits[0]),Math.max(l.contrastLimits[1],r.contrastLimits[1],h.contrastLimits[1])]}}async function N(o,t=[{c:0,t:0}]){const s=await Promise.all(t.map(a=>T(o,a))),i=s.map(a=>a.contrastLimits),e=s.map(a=>a.contrastLimits);return{domains:i,contrastLimits:e}}function E(o){const t=new Array(o).fill([0,1e3]),s=t,i=new Array(o).fill().map((n,c)=>({c,t:0,z:0,_id:c})),e=I(o),a=new Array(o).fill(!0);return{domains:t,contrastLimits:s,selections:i,colors:e,channelsVisible:a}}function I(o){return o==1?[[255,255,255]]:new Array(o).fill([0,0,0]).map((t,s)=>{const i=s/o;return[Math.floor(i*255),Math.floor((1-i)*255),0]})}function O(o){var e;const{x:t,y:s,z:i}=((e=o==null?void 0:o.meta)==null?void 0:e.physicalSizes)??{};if(t!=null&&t.size&&(s!=null&&s.size)&&(i!=null&&i.size)){const a=Math.min(i.size,t.size,s.size),n=[t.size/a,s.size/a,i.size/a];return new L().scale(n)}return new L().identity()}function y(o){const t=Array.isArray(o)?o[0]:o,{shape:s,labels:i}=t,e=O(t),a=[0,e[0]*s[i.indexOf("x")]],n=[0,e[5]*s[i.indexOf("y")]],c=[0,e[10]*s[i.indexOf("z")]];return[a,n,c]}const p=new Map;function F(o){console.log("accepting tiff cache"),o.forEach((t,s)=>{p.set(s,t)})}function G(o){if(p.has(o))return p.get(o);const t=Y(o);return p.set(o,t),t}class U{constructor(t,s,i){console.log("new VivViewerMDV",s),this.canvas=t,this.height=this.canvas.height,this.width=this.canvas.width,this.config=s,this.hasRequestedDefaultChannelStats=!1,this.initClip(),G(s.url).then(e=>{this.tiff=e,this._setUp(e,i)})}setSize(t,s,i){this.height=s,this.width=t;const{x_scale:e,y_scale:a,offset:n}=i,c=this.getViewState(e,a,n);this.canvas.width=t,this.canvas.height=s,this.canvas.style.width=t,this.canvas.style.height=s,this.deck.setProps({height:s,width:t,viewState:c})}setPanZoom(t,s,i){const e=this.getViewState(s,i,t);this.deck.setProps({viewState:e})}getViewState(t,s,i){if(this.config.use3d)return;const e=Math.log2(s),a=Math.log2(t);let n=1/t*this.native_x/2;n-=i[0];let c=1/s*this.native_y/2;return c+=this.native_y-i[1],{height:this.native_y,width:this.native_x,id:f,target:[n,c,0],zoom:[a,e]}}setChannel(t){const s=this.mainVivLayer.props,i=s.selections.findIndex(e=>e.id===t.id);s.colors[i]=S(t.color),s.contrastLimits[i]=t.contrastLimits,s.channelsVisible[i]=t.channelsVisible,t.domains&&(s.domains[i]=t.domains),this.layers=[...this.layers],this.deck.setProps({layers:this.layers})}removeChannel(t){const s=this.mainVivLayer.props,i=s.selections.findIndex(e=>e.id===t.id);s.colors.splice(i,1),s.selections.splice(i,1),s.contrastLimits.splice(i,1),s.channelsVisible.splice(i,1),s.domains.splice(i,1),this.createLayers(s),this.deck.setProps({layers:[this.layers]})}async addChannel(t){const s=this.mainVivLayer.props;s.channelsVisible.push(!0),t.color=t.color||"#ff00ff";const i={z:0,t:0,c:t.index},e=await this.getDefaultChannelValues([{index:0,sel:i}]);return t.contrastLimits=e[0].stats.contrastLimits,t.domains=e[0].stats.domain,t.channelsVisible=!0,s.colors.push(S(t.color)),s.contrastLimits.push(t.contrastLimits),s.domains.push(t.domains),t.id=V(),s.selections.push({...i,id:t.id}),this.createLayers(s),this.deck.setProps({layers:[this.layers]}),t.name=this.channels[t.index].Name,t}getAllChannels(){return this.channels}getSelectedChannels(){const{props:t}=this.mainVivLayer,s=t.selections.map(e=>this.channels[e.c].Name),i=t.colors.map(b);return s.map((e,a)=>({name:e,index:t.selections[a].c,id:t.selections[a].id,color:i[a],contrastLimits:t.contrastLimits[a].slice(0),channelsVisible:t.channelsVisible[a],domains:t.domains[a]}))}recenterCamera(){if(!this.config.use3d)return;console.log("recenter");const{SizeX:t,SizeY:s,SizeZ:i}=this.tiff.metadata.Pixels,a={target:[t/2,s/2,i/2],zoom:1,rotationX:0,rotationOrbit:0+Math.random()*.01};this.volViewState=a,this.deck.setProps({initialViewState:a})}_createLayers3D(){const t=this.tiff,{SizeX:s,SizeY:i,SizeZ:e,Channels:a}=t.metadata.Pixels,n="3d_"+f,c=t.data,d=a.length,l=t.data[0].dtype,{domains:r,contrastLimits:h,selections:m,colors:v,channelsVisible:x}=this.newVivProps??(this.mainVivLayer?this.mainVivLayer.props:E(d));this.newVivProps=null,this.hasRequestedDefaultChannelStats||(this.hasRequestedDefaultChannelStats=!0,this.defaultDomains=r,this.defaultContrastLimits=h.slice(0),N(c,m).then(w=>{this.defaultDomains=w.domains,this.defaultContrastLimits=w.contrastLimits.slice(0),this.newVivProps={...this.mainVivLayer.props,...w},this._updateProps()}));const C=this.getXSlice(),z=this.getYSlice(),P=this.getZSlice(),D=c.length-1,_={id:n,loader:c,dtype:l,resolution:D,channelsVisible:x,contrastLimits:h,domains:r,selections:m,colors:v,xSlice:C,ySlice:z,zSlice:P},g=this.detailView.getLayers({props:_,viewStates:[this.volViewState]});this.layers=g,this.mainVivLayer=g[0],this.config.scatterData&&g.push(new M({data:this.config.scatterData,radiusScale:1,billboard:!0,getFillColor:this.config.getScatterFillColor}))}initClip(){this.clipX=[0,1],this.clipY=[0,1],this.clipZ=[0,1]}setClipX(t,s){this.clipX=[t,s],this._updateProps()}setClipY(t,s){this.clipY=[t,s],this._updateProps()}setClipZ(t,s){this.clipZ=[t,s],this._updateProps()}getXSlice(){this.tiff.metadata.Pixels;const[t,s]=this.clipX,i=y(this.loader)[0][1];return[t*i,s*i]}getYSlice(){this.tiff.metadata.Pixels;const[t,s]=this.clipY,i=y(this.loader)[1][1];return[t*i,s*i]}getZSlice(){this.tiff.metadata.Pixels;const[t,s]=this.clipZ,i=y(this.loader)[2][1];return[t*i,s*i]}_updateProps(){this.createLayers(),this.deck.setProps({layers:this.layers})}_parseChannels(t){const s={selections:[],colors:[],channelsVisible:[],contrastLimits:[],domains:[]};for(let i of t){const e=i.name||i.Name,a=this.channels.findIndex(c=>c.Name===e);if(a===-1){console.warn("channel not found",i),console.warn("available channel Names",this.channels.map(c=>c.Name));continue}s.selections.push({z:0,t:0,c:a});let n=i.color;n=n?typeof i.color=="string"?S(n):n:[255,0,0],s.colors.push(n),s.channelsVisible.push(i.visible==null?!0:i.visible),s.contrastLimits.push(i.contrastLimits||null),s.domains.push(i.domains||null)}return s}getSelectedChannelsNice(){const t=this.layers[0].props;return t.selections.map((s,i)=>({name:this.channels[s.c].Name,color:t.colors[i],visible:t.channelsVisible[i],contrastLimits:t.contrastLimits[i],domains:t.domains[i]}))}_setUp(t,s){this.native_x=t.metadata.Pixels.SizeX,this.native_y=t.metadata.Pixels.SizeY;const{use3d:i}=this.config;this.extensions=[new k],this.channels=t.metadata.Pixels.Channels,this.loader=t.data,this.transparentColor=[255,255,255];const e=this.getViewState(s.x_scale,s.y_scale,s.offset);if(i){const{SizeX:l,SizeY:r,SizeZ:h}=t.metadata.Pixels,m=[l/2,r/2,h/2];this.volViewState={zoom:1,target:m},this.detailView=new R({id:f,useFixedAxis:!1,target:m,extensions:[new X.AdditiveBlendExtension]})}else this.detailView=new Z({id:f,height:this.native_y,width:this.native_x});const a=this.volViewState;let{image_properties:n}=this.config;const c=this.detailView.getDeckGlView();if(this.config.channels&&(n=this._parseChannels(this.config.channels)),n!=null&&n.selections)for(let l of n.selections)l.id=V();const d=[];for(let l=0;l<n.contrastLimits.length;l++)n.contrastLimits[l]&&n.domains[l]||d.push({index:l,sel:n.selections[l]});this.getDefaultChannelValues(d).then(l=>{for(let r of l)n.contrastLimits[r.index]=r.stats.contrastLimits,n.domains[r.index]=r.stats.domain;this.createLayers(n),this.deck=new A({canvas:this.canvas,layers:[this.layers],views:[c],viewState:e,width:this.width,height:this.height,useDevicePixels:!1,initialViewState:a,controller:i})})}async getDefaultChannelValues(t){const s=this.loader[this.loader.length-1];return await Promise.all(t.map(async i=>{const e=await s.getRaster({selection:i.sel});return{index:i.index,stats:u(e.data)}}))}createLayers(t){if(this.config.use3d){this._createLayers3D();return}const s={id:f},i={loader:this.loader,contrastLimits:t.contrastLimits.slice(0),domains:t.domains.slice(0),colors:t.colors.slice(0),channelsVisible:t.channelsVisible.slice(0),selections:t.selections.slice(0),extensions:this.extensions,transparentColor:this.transparentColor};this.defaultDomains||(this.defaultDomains=i.contrastLimits),this.defaultContrastLimits||(this.defaultContrastLimits=this.defaultDomains.slice(0)),this.layers=this.detailView.getLayers({viewStates:s,props:i}),this.mainVivLayer=this.layers[0]}}export{F as acceptTiffCache,U as default};
//# sourceMappingURL=VivViewerMDV-VF3MTiZC.js.map
