{"version":3,"file":"boxPlotWorker-CJ4iGct0.js","sources":["../src/datastore/boxPlotWorker.js"],"sourcesContent":["onmessage= function(e){\n    if (e.data[4].analysis===\"multi\"){\n        this.postMessage(multiBoxPlot(e));\n        return;\n    }\n    const lFilter=new  Uint8Array(e.data[0]);\n    const gFilter = new  Uint8Array(e.data[1]);\n    const categories= new Uint8Array(e.data[2]);\n    const arrType= e.data[3][1] === \"int32\"?Int32Array:Float32Array;\n    const values = new arrType(e.data[3][0]);\n    const config = e.data[4];\n    const len =values.length;\n    const catLen = config.values.length;\n\n    const cats= new Array(catLen).fill(0);\n\n    //get the number in each then create arrays\n    //even though 2 iterations over data this is much faster\n    for (let i=0;i<len;i++){\n        if (gFilter[i]!==0){\n            if  (gFilter[i] !==lFilter[i]){\n            continue;\n            }           \n        }\n        if (isNaN(values[i])){\n            continue;\n        }        \n        cats[categories[i]]++;\n    }\n    const arrs = [];\n    for (let n=0;n<catLen;n++){\n        arrs.push(new arrType(cats[n]))\n    }\n\n    const totals = new Array(catLen).fill(0);\n    const xPos= new Float32Array(config.xPos);\n \n    for (let n= 0;n<len;n++){\n        if (gFilter[n]!==0){\n            if  (gFilter[n] !==lFilter[n]){\n            continue;\n            }           \n        }\n        if (isNaN(values[n])){\n            continue;\n        }  \n        const cat = categories[n];\n        arrs[cat][totals[cat]++]=values[n];\n    }\n    const boxStats=[];\n \n\n    if (config.analysis===\"boxplot\"){\n        const ids={};\n        for (let n=0;n<catLen;n++){\n            const arr= arrs[n];\n            const l = arr.length\n            if (l==0){\n                continue;\n            }\n            arr.sort();\n            const midIndex= median(0,l);\n            const med = arr[midIndex]\n            const Q1= arr[median(0,midIndex)];\n            const Q3=arr[median(midIndex+1,l)];\n            const IQR = Q3-Q1;\n            let min=Q1-(1.5*IQR);\n            let max=Q3+(1.5*IQR);\n            min = min<arr[0]?arr[0]:min;\n            max= max>arr[l-1]?arr[l-1]:max;\n          \n            ids[n]=boxStats.length; \n            boxStats.push({\n                max:max,\n                min:min,\n                Q1:Q1,\n                Q3:Q3,\n                med:med,\n                id:n\n            });\n            \n        }\n        for (let n= 0;n<len;n++){\n            const p =  ids[categories[n]];  \n            if (p!== undefined){\n                xPos[n]= p*50+4+Math.random()*42;\n            }\n        }\n    }\n    else{\n       \n        const ranges = {};\n        for (let n=0;n<catLen;n++){\n            let k = null;\n            if (config.scaletrim){\n                k = stKernelDensityEstimator(arrs[n],config.ticks,config.scaletrim,config.bandwidth || 7);\n            }\n            else{\n                k = kernelDensityEstimator(arrs[n],config.ticks,config.bandwidth || 7);\n            }\n            \n            const max = Math.max(...k);\n            \n            if (max !==0 && !(isNaN(max))){\n                k.id=n;\n                k.max=max;\n                ranges[n]=[boxStats.length,max,k]\n                boxStats.push(k);\n               \n            }\n                     \n        }\n        const min = config.ticks[config.ticks.length-1];\n        const interval =  config.ticks[0]-config.ticks[1];\n        for (let n= 0;n<len;n++){\n            \n            const r = ranges[categories[n]];\n            if (r){\n                //const index =Math.floor((values[n]-min)/interval)\n                //const fr = r[2][17-index]/r[1];\n                xPos[n]= r[0]*50+4+Math.random()*42;\n            }\n        }\n    }\n    postMessage(boxStats);\n}\n\nfunction median(l,r){    \n    return l+Math.round((r-l)/2)\n}\n\nfunction stKernelDensityEstimator(V,X,Qs,k=2){\n\n    const den = Qs[1]-Qs[0];\n    return X.map(function(x) {\n        let sum=0;\n        let count=0;\n        for (let i=0;i<V.length;i++){\n            let val = V[i];\n            if (!isNaN(val)){\n                val=(val-Qs[0])/den;\n                val= val<0?0:val>1?1:val;\n                let v= x-val;\n                sum+=Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n                count++;\n            }\n        }\n      return  sum/count;\n    });\n       \n       \n   \n}\n\nfunction kernelDensityEstimator(V,X,k=2) {   \n    return X.map(function(x) {\n        let sum=0;\n        let count=0;\n        for (let i=0;i<V.length;i++){\n            let val = V[i];\n            if (!isNaN(val)){\n              let v= x-val;\n              sum+=Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\n              count++;\n            }\n        }\n      return  sum/count;\n    });\n  \n}\n\n\nfunction multiBoxPlot(e){\n\n    const data= [];\n    for (let item of e.data[2]){\n        data.push(item[1]===\"int32\"?new Int32Array(item[0]):new Float32Array(item[0]))\n    }\n    const dLen= data.length;\n    const config = e.data[4];\n   \n    const scaleVals = config.scaleVals;\n    for (let sv of scaleVals){\n        sv.push(sv[1]-sv[0])\n    }\n  \n    const lFilter=new  Uint8Array(e.data[0]);\n    const gFilter = new  Uint8Array(e.data[1]);\n    const tLen= gFilter.length;\n    const results = new Array(dLen);\n    const cats= new  Uint8Array(e.data[3]);\n    const cat= config.cat;\n    let total=0;\n    for (let i=0;i<tLen;i++){\n        if (cats[i] === cat && gFilter[i]===0){\n             total++;  \n        }         \n    }\n\n    for (let n=0;n<dLen;n++){\n        //should cope with int32 and float32 \n        results[n]=new Float64Array(total);\n    }\n    count=0;\n    for (let i=0;i<tLen;i++){\n        if (cats[i] === cat && gFilter[i]===0){     \n            for (let n=0;n<dLen;n++){\n                let v= (data[n][i]-scaleVals[n][0])/scaleVals[n][2];\n                results[n][count]=v<0?0:v>1?1:v;   \n            }\n            count++;\n        }\n    }\n    const boxStats=[];\n    let tmin = Number.MAX_VALUE;\n    let tmax = Number.MIN_VALUE\n    for (let n=0;n<dLen;n++){\n        const arr= results[n];\n        const l = arr.length;  \n        arr.sort();\n        const midIndex= median(0,l);\n        const med = arr[midIndex]\n        const Q1= arr[median(0,midIndex)];\n        const Q3=arr[median(midIndex+1,l)];\n        const IQR = Q3-Q1;\n        let min=Q1-(1.5*IQR);\n        let max=Q3+(1.5*IQR);\n        min = min<arr[0]?arr[0]:min;\n        max= max>arr[l-1]?arr[l-1]:max;\n        tmin= Math.min(tmin,min);\n        tmax=Math.max(tmax,max);\n        boxStats.push({\n            max:max,\n            min:min,\n            Q1:Q1,\n            Q3:Q3,\n            med:med,\n            id:n\n        });   \n    }\n    boxStats.max=tmax;\n    boxStats.min=tmin;\n    return boxStats\n\n\n\n}"],"names":["e","multiBoxPlot","lFilter","gFilter","categories","arrType","values","config","len","catLen","cats","i","arrs","n","totals","xPos","cat","boxStats","ids","arr","l","midIndex","median","med","Q1","Q3","IQR","min","max","p","ranges","k","stKernelDensityEstimator","kernelDensityEstimator","r","V","X","Qs","den","x","sum","count","val","v","data","item","dLen","scaleVals","sv","tLen","results","total","tmin","tmax"],"mappings":"yBAAA,UAAW,SAASA,EAAE,CAClB,GAAIA,EAAE,KAAK,CAAC,EAAE,WAAW,QAAQ,CAC7B,KAAK,YAAYC,EAAaD,CAAC,CAAC,EAChC,MACH,CACD,MAAME,EAAQ,IAAK,WAAWF,EAAE,KAAK,CAAC,CAAC,EACjCG,EAAU,IAAK,WAAWH,EAAE,KAAK,CAAC,CAAC,EACnCI,EAAY,IAAI,WAAWJ,EAAE,KAAK,CAAC,CAAC,EACpCK,EAASL,EAAE,KAAK,CAAC,EAAE,CAAC,IAAM,QAAQ,WAAW,aAC7CM,EAAS,IAAID,EAAQL,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,EACjCO,EAASP,EAAE,KAAK,CAAC,EACjBQ,EAAKF,EAAO,OACZG,EAASF,EAAO,OAAO,OAEvBG,EAAM,IAAI,MAAMD,CAAM,EAAE,KAAK,CAAC,EAIpC,QAASE,EAAE,EAAEA,EAAEH,EAAIG,IACXR,EAAQQ,CAAC,IAAI,GACRR,EAAQQ,CAAC,IAAKT,EAAQS,CAAC,GAI5B,MAAML,EAAOK,CAAC,CAAC,GAGnBD,EAAKN,EAAWO,CAAC,CAAC,IAEtB,MAAMC,EAAO,CAAA,EACb,QAASC,EAAE,EAAEA,EAAEJ,EAAOI,IAClBD,EAAK,KAAK,IAAIP,EAAQK,EAAKG,CAAC,CAAC,CAAC,EAGlC,MAAMC,EAAS,IAAI,MAAML,CAAM,EAAE,KAAK,CAAC,EACjCM,EAAM,IAAI,aAAaR,EAAO,IAAI,EAExC,QAASM,EAAG,EAAEA,EAAEL,EAAIK,IAAI,CAMpB,GALIV,EAAQU,CAAC,IAAI,GACRV,EAAQU,CAAC,IAAKX,EAAQW,CAAC,GAI5B,MAAMP,EAAOO,CAAC,CAAC,EACf,SAEJ,MAAMG,EAAMZ,EAAWS,CAAC,EACxBD,EAAKI,CAAG,EAAEF,EAAOE,CAAG,GAAG,EAAEV,EAAOO,CAAC,CACpC,CACD,MAAMI,EAAS,CAAA,EAGf,GAAIV,EAAO,WAAW,UAAU,CAC5B,MAAMW,EAAI,CAAA,EACV,QAAS,EAAE,EAAE,EAAET,EAAO,IAAI,CACtB,MAAMU,EAAKP,EAAK,CAAC,EACXQ,EAAID,EAAI,OACd,GAAIC,GAAG,EACH,SAEJD,EAAI,KAAI,EACR,MAAME,EAAUC,EAAO,EAAEF,CAAC,EACpBG,EAAMJ,EAAIE,CAAQ,EAClBG,EAAIL,EAAIG,EAAO,EAAED,CAAQ,CAAC,EAC1BI,EAAGN,EAAIG,EAAOD,EAAS,EAAED,CAAC,CAAC,EAC3BM,EAAMD,EAAGD,EACf,IAAIG,EAAIH,EAAI,IAAIE,EACZE,EAAIH,EAAI,IAAIC,EAChBC,EAAMA,EAAIR,EAAI,CAAC,EAAEA,EAAI,CAAC,EAAEQ,EACxBC,EAAKA,EAAIT,EAAIC,EAAE,CAAC,EAAED,EAAIC,EAAE,CAAC,EAAEQ,EAE3BV,EAAI,CAAC,EAAED,EAAS,OAChBA,EAAS,KAAK,CACV,IAAIW,EACJ,IAAID,EACJ,GAAGH,EACH,GAAGC,EACH,IAAIF,EACJ,GAAG,CACnB,CAAa,CAEJ,CACD,QAAS,EAAG,EAAE,EAAEf,EAAI,IAAI,CACpB,MAAMqB,EAAKX,EAAId,EAAW,CAAC,CAAC,EACxByB,IAAK,SACLd,EAAK,CAAC,EAAGc,EAAE,GAAG,EAAE,KAAK,OAAQ,EAAC,GAErC,CACJ,KACG,CAEA,MAAMC,EAAS,CAAA,EACf,QAAS,EAAE,EAAE,EAAErB,EAAO,IAAI,CACtB,IAAIsB,EAAI,KACJxB,EAAO,UACPwB,EAAIC,EAAyBpB,EAAK,CAAC,EAAEL,EAAO,MAAMA,EAAO,UAAUA,EAAO,WAAa,CAAC,EAGxFwB,EAAIE,EAAuBrB,EAAK,CAAC,EAAEL,EAAO,MAAMA,EAAO,WAAa,CAAC,EAGzE,MAAMqB,EAAM,KAAK,IAAI,GAAGG,CAAC,EAErBH,IAAO,GAAK,CAAE,MAAMA,CAAG,IACvBG,EAAE,GAAG,EACLA,EAAE,IAAIH,EACNE,EAAO,CAAC,EAAE,CAACb,EAAS,OAAOW,EAAIG,CAAC,EAChCd,EAAS,KAAKc,CAAC,EAItB,CACWxB,EAAO,MAAMA,EAAO,MAAM,OAAO,CAAC,EAC5BA,EAAO,MAAM,CAAC,EAAEA,EAAO,MAAM,CAAC,EAChD,QAAS,EAAG,EAAE,EAAEC,EAAI,IAAI,CAEpB,MAAM0B,EAAIJ,EAAO1B,EAAW,CAAC,CAAC,EAC1B8B,IAGAnB,EAAK,CAAC,EAAGmB,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,OAAQ,EAAC,GAExC,CACJ,CACD,YAAYjB,CAAQ,CACxB,EAEA,SAASK,EAAOF,EAAEc,EAAE,CAChB,OAAOd,EAAE,KAAK,OAAOc,EAAEd,GAAG,CAAC,CAC/B,CAEA,SAASY,EAAyBG,EAAEC,EAAEC,EAAGN,EAAE,EAAE,CAEzC,MAAMO,EAAMD,EAAG,CAAC,EAAEA,EAAG,CAAC,EACtB,OAAOD,EAAE,IAAI,SAASG,EAAG,CACrB,IAAIC,EAAI,EACJC,EAAM,EACV,QAAS,EAAE,EAAE,EAAEN,EAAE,OAAO,IAAI,CACxB,IAAIO,EAAMP,EAAE,CAAC,EACb,GAAI,CAAC,MAAMO,CAAG,EAAE,CACZA,GAAKA,EAAIL,EAAG,CAAC,GAAGC,EAChBI,EAAKA,EAAI,EAAE,EAAEA,EAAI,EAAE,EAAEA,EACrB,IAAIC,EAAGJ,EAAEG,EACTF,GAAK,KAAK,IAAIG,GAAKZ,CAAC,GAAK,EAAI,KAAQ,EAAIY,EAAIA,GAAKZ,EAAI,EACtDU,GACH,CACJ,CACH,OAAQD,EAAIC,CAClB,CAAK,CAIL,CAEA,SAASR,EAAuBE,EAAEC,EAAEL,EAAE,EAAG,CACrC,OAAOK,EAAE,IAAI,SAASG,EAAG,CACrB,IAAIC,EAAI,EACJC,EAAM,EACV,QAAS9B,EAAE,EAAEA,EAAEwB,EAAE,OAAOxB,IAAI,CACxB,IAAI+B,EAAMP,EAAExB,CAAC,EACb,GAAI,CAAC,MAAM+B,CAAG,EAAE,CACd,IAAIC,EAAGJ,EAAEG,EACTF,GAAK,KAAK,IAAIG,GAAKZ,CAAC,GAAK,EAAI,KAAQ,EAAIY,EAAIA,GAAKZ,EAAI,EACtDU,GACD,CACJ,CACH,OAAQD,EAAIC,CAClB,CAAK,CAEL,CAGA,SAASxC,EAAaD,EAAE,CAEpB,MAAM4C,EAAM,CAAA,EACZ,QAASC,KAAQ7C,EAAE,KAAK,CAAC,EACrB4C,EAAK,KAAKC,EAAK,CAAC,IAAI,QAAQ,IAAI,WAAWA,EAAK,CAAC,CAAC,EAAE,IAAI,aAAaA,EAAK,CAAC,CAAC,CAAC,EAEjF,MAAMC,EAAMF,EAAK,OACXrC,EAASP,EAAE,KAAK,CAAC,EAEjB+C,EAAYxC,EAAO,UACzB,QAASyC,KAAMD,EACXC,EAAG,KAAKA,EAAG,CAAC,EAAEA,EAAG,CAAC,CAAC,EAGT,IAAK,WAAWhD,EAAE,KAAK,CAAC,CAAC,EACvC,MAAMG,EAAU,IAAK,WAAWH,EAAE,KAAK,CAAC,CAAC,EACnCiD,EAAM9C,EAAQ,OACd+C,EAAU,IAAI,MAAMJ,CAAI,EACxBpC,EAAM,IAAK,WAAWV,EAAE,KAAK,CAAC,CAAC,EAC/BgB,EAAKT,EAAO,IAClB,IAAI4C,EAAM,EACV,QAASxC,EAAE,EAAEA,EAAEsC,EAAKtC,IACZD,EAAKC,CAAC,IAAMK,GAAOb,EAAQQ,CAAC,IAAI,GAC/BwC,IAIT,QAAStC,EAAE,EAAEA,EAAEiC,EAAKjC,IAEhBqC,EAAQrC,CAAC,EAAE,IAAI,aAAasC,CAAK,EAErC,MAAM,EACN,QAASxC,EAAE,EAAEA,EAAEsC,EAAKtC,IAChB,GAAID,EAAKC,CAAC,IAAMK,GAAOb,EAAQQ,CAAC,IAAI,EAAE,CAClC,QAAS,EAAE,EAAE,EAAEmC,EAAK,IAAI,CACpB,IAAIH,GAAIC,EAAK,CAAC,EAAEjC,CAAC,EAAEoC,EAAU,CAAC,EAAE,CAAC,GAAGA,EAAU,CAAC,EAAE,CAAC,EAClDG,EAAQ,CAAC,EAAE,KAAK,EAAEP,EAAE,EAAE,EAAEA,EAAE,EAAE,EAAEA,CACjC,CACD,OACH,CAEL,MAAM1B,EAAS,CAAA,EACf,IAAImC,EAAO,OAAO,UACdC,EAAO,OAAO,UAClB,QAASxC,EAAE,EAAEA,EAAEiC,EAAKjC,IAAI,CACpB,MAAMM,EAAK+B,EAAQrC,CAAC,EACdO,EAAID,EAAI,OACdA,EAAI,KAAI,EACR,MAAME,EAAUC,EAAO,EAAEF,CAAC,EACpBG,EAAMJ,EAAIE,CAAQ,EAClBG,EAAIL,EAAIG,EAAO,EAAED,CAAQ,CAAC,EAC1BI,EAAGN,EAAIG,EAAOD,EAAS,EAAED,CAAC,CAAC,EAC3BM,EAAMD,EAAGD,EACf,IAAIG,EAAIH,EAAI,IAAIE,EACZE,EAAIH,EAAI,IAAIC,EAChBC,EAAMA,EAAIR,EAAI,CAAC,EAAEA,EAAI,CAAC,EAAEQ,EACxBC,EAAKA,EAAIT,EAAIC,EAAE,CAAC,EAAED,EAAIC,EAAE,CAAC,EAAEQ,EAC3BwB,EAAM,KAAK,IAAIA,EAAKzB,CAAG,EACvB0B,EAAK,KAAK,IAAIA,EAAKzB,CAAG,EACtBX,EAAS,KAAK,CACV,IAAIW,EACJ,IAAID,EACJ,GAAGH,EACH,GAAGC,EACH,IAAIF,EACJ,GAAGV,CACf,CAAS,CACJ,CACD,OAAAI,EAAS,IAAIoC,EACbpC,EAAS,IAAImC,EACNnC,CAIX"}