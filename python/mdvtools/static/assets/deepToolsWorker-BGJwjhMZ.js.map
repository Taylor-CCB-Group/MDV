{"version":3,"file":"deepToolsWorker-BGJwjhMZ.js","sources":["../src/datastore/deepToolsWorker.js"],"sourcesContent":["onmessage=function(e){\n    const {orderBuffer,filterBuffer,dimensions,data,displayData,colorScale,colorOnly}=e.data;\n    //get access to the shared buffers\n    const len = dimensions.length;\n  \n    const rowPositions = new Uint16Array(data,0,len);\n    const colPositions = new Uint16Array(data,len*2,len);\n    const values = new Uint8Array(data,len*4,len);\n\n    const x= new Float32Array(displayData,0,len);\n    const y= new Float32Array(displayData,len*4,len);\n    const colors= new Uint8Array(displayData,len*8,len*3);\n    const order= new Uint32Array(orderBuffer);\n    const filter = new Uint8Array(filterBuffer);\n\n\n    const c =  dimensions.columns;\n    const currentRows = {};\n    const reverse_map= {};\n   \n    let i=0;\n   \n    for (let n of order){\n        if (filter[n]===0){\n            currentRows[n]=i;\n            reverse_map[i]=n;\n            i++\n        }\n    }\n    const cpg = c/dimensions.groups;\n\n    i=0;\n\n    const interval_size = (colorScale.max-colorScale.min)/colorScale.bins;\n    \n    for (let n=0;n<len;n++){\n        const row = currentRows[rowPositions[n]]\n        if (row===undefined){\n            continue;\n        }\n        //update the colors\n        let v = Math.min(colorScale.max,values[n]);\n        v= Math.max(colorScale.min,v);   \n        const color = colorScale.colors[Math.floor((v - colorScale.min) / interval_size)];    \n        const p = 3*i;\n        colors[p]=color[0];\n        colors[p+1]=color[1];\n        colors[p+2]=color[2];\n        if (colorOnly){\n            i++;\n            continue;\n        }\n        const col = colPositions[n]; \n        x[i]=col*20 + (Math.floor(col/cpg)*200)+10;\n        y[i]=row*20+10;\n        i++;\n    } \n    postMessage({reverse_map,total:i,currentRows});\n    \n}\n"],"names":["e","orderBuffer","filterBuffer","dimensions","data","displayData","colorScale","colorOnly","len","rowPositions","colPositions","values","x","y","colors","order","filter","c","currentRows","reverse_map","i","n","cpg","interval_size","row","v","color","p","col"],"mappings":"yBAAA,UAAU,SAASA,EAAE,CACjB,KAAM,CAAC,YAAAC,EAAY,aAAAC,EAAa,WAAAC,EAAW,KAAAC,EAAK,YAAAC,EAAY,WAAAC,EAAW,UAAAC,CAAS,EAAEP,EAAE,KAE9EQ,EAAML,EAAW,OAEjBM,EAAe,IAAI,YAAYL,EAAK,EAAEI,CAAG,EACzCE,EAAe,IAAI,YAAYN,EAAKI,EAAI,EAAEA,CAAG,EAC7CG,EAAS,IAAI,WAAWP,EAAKI,EAAI,EAAEA,CAAG,EAEtCI,EAAG,IAAI,aAAaP,EAAY,EAAEG,CAAG,EACrCK,EAAG,IAAI,aAAaR,EAAYG,EAAI,EAAEA,CAAG,EACzCM,EAAQ,IAAI,WAAWT,EAAYG,EAAI,EAAEA,EAAI,CAAC,EAC9CO,EAAO,IAAI,YAAYd,CAAW,EAClCe,EAAS,IAAI,WAAWd,CAAY,EAGpCe,EAAKd,EAAW,QAChBe,EAAc,CAAA,EACdC,EAAa,CAAA,EAEnB,IAAIC,EAAE,EAEN,QAASC,KAAKN,EACNC,EAAOK,CAAC,IAAI,IACZH,EAAYG,CAAC,EAAED,EACfD,EAAYC,CAAC,EAAEC,EACfD,KAGR,MAAME,EAAML,EAAEd,EAAW,OAEzBiB,EAAE,EAEF,MAAMG,GAAiBjB,EAAW,IAAIA,EAAW,KAAKA,EAAW,KAEjE,QAASe,EAAE,EAAEA,EAAEb,EAAIa,IAAI,CACnB,MAAMG,EAAMN,EAAYT,EAAaY,CAAC,CAAC,EACvC,GAAIG,IAAM,OACN,SAGJ,IAAIC,EAAI,KAAK,IAAInB,EAAW,IAAIK,EAAOU,CAAC,CAAC,EACzCI,EAAG,KAAK,IAAInB,EAAW,IAAImB,CAAC,EAC5B,MAAMC,EAAQpB,EAAW,OAAO,KAAK,OAAOmB,EAAInB,EAAW,KAAOiB,CAAa,CAAC,EAC1EI,EAAI,EAAEP,EAIZ,GAHAN,EAAOa,CAAC,EAAED,EAAM,CAAC,EACjBZ,EAAOa,EAAE,CAAC,EAAED,EAAM,CAAC,EACnBZ,EAAOa,EAAE,CAAC,EAAED,EAAM,CAAC,EACfnB,EAAU,CACVa,IACA,QACH,CACD,MAAMQ,EAAMlB,EAAaW,CAAC,EAC1BT,EAAEQ,CAAC,EAAEQ,EAAI,GAAM,KAAK,MAAMA,EAAIN,CAAG,EAAE,IAAK,GACxCT,EAAEO,CAAC,EAAEI,EAAI,GAAG,GACZJ,GACH,CACD,YAAY,CAAC,YAAAD,EAAY,MAAMC,EAAE,YAAAF,CAAW,CAAC,CAEjD"}